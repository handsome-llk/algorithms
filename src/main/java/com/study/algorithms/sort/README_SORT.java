package com.study.algorithms.sort;

public class README_SORT {

    /**
     * 关于循环不变式，必须证明三条性质：
     * 1、循环的第一次迭代之前，它为真
     * 2、如果循环的某次迭代之前它为真，那么下次迭代之前它仍为真
     * 3、当前两条性质成立时，在循环的每次迭代之前循环不变式为真
     */

    /**
     * 三种求解递归式的方法：
     * 1、代入法：我们猜测一个界，然后用数学归纳法证明这个界是正确的。
     * 2、递归树法：将递归式转换为一棵树，其结点表示不同层次的递归调用产生的代价。然后采用边界和技术来求解递归式。
     * 3、主方法：可求解形如下面公式的递归式的界：
     *    T(n) = aT(n/b) + f(n)
     *    其中a>=1,b>1,f(n)是一个给定的函数。这种形式的递归式很常见，它刻画了这样一个分治算法：生成a个子问题，
     *    每个子问题的规模是原问题规模的1/b，分解和合并步骤总共花费时间为f(n)。
     */


}
