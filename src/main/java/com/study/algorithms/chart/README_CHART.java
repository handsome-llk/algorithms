package com.study.algorithms.chart;

/**
 * 图算法
 */
public class README_CHART {

    /**
     * 广度优先搜索：
     *
     * 给定图G = (V, E)和一个可以识别的源结点s，广度优先搜索对图G中的边进行系统性的探索来发现可以从源结点s到达的所有
     * 结点。该算法能够计算从源结点s到每个可到达的结点距离(最少的边数)，同时生成一棵“广度优先搜索树”。
     *
     * V 是图中所有结点
     *
     */

    /**
     * 深度优先搜索：
     *
     * 深度优先搜索总是对最近才发现的结点v的出发边进行探索，直到该结点的所有出发边都被发现为止。一旦结点v的所有出发边都被
     * 发现，探索则“回溯"到v的前驱结点(v是经过该结点才被发现的)，来搜索该前驱结点的出发边。该过程一直持续到从源结点
     * 可以达到的所有结点都被发现为止。
     *
     */

    /**
     * 拓扑排序：
     *
     * 对于一个有向无环图G = (V, E)来说，其拓扑排序是G中所有结点的一种线性次序，该次序满足如下条件：如果图G包含边(u, v)，
     * 则结点u在拓扑排序中处于结点v的前面（如果图G包含环路，则不可能排出一个线性次序）。可以将图的拓扑排序看作是将图的
     * 所有结点在一条水平线上排开，图的所有有向边都从做指向右。
     *
     * 许多实际应用都需要使用有向无环图来指明事件的优先次序。
     * 例子见：pic/chart/topologicalSort_1.png
     *
     * 通过深度优先搜索标记每个结点的完成时刻f，再按f降序即可得到拓扑图
     * 为什么可以用f降序来获得图谱图呢？
     * 因为从深度优先搜索树中来说，对于其中某一棵树，其f越大，说明越处于上位
     *
     *
     */

    /**
     * 强连通分量：
     *
     * 定义：
     * 在有向图G = (V, E)中，如果两个顶点vi, vj间有一条从vi到vj的有向路径，同时还有一条从vj到vi的有向路径，则称这两个
     * 顶点强连通。如果有向图G的每两个顶点都强连通，则称G是一个强连通图。有向图的极大强连通子图，成为强连通分量。
     *
     * 导论定义：
     * 有向图G = (V, E)的强连通分量是一个最大结点集合C in V，对于集合C中的任意结点u和v来说，路径u -...-> v 和
     * v -...-> u同时存在，也就是说结点u和结点v可以互相到达。
     *
     * 结合两个一起就很好理解。
     *
     */

    /**
     * 用深度优先搜索求强连通分量
     * https://www.jianshu.com/p/a404f235abb4
     *
     * 见图
     * pci/chart/stronglyConnectedComponent_1.png
     * pci/chart/stronglyConnectedComponent_2.png
     * pci/chart/stronglyConnectedComponent_3.png
     * 方法：
     * 1、对图G进行DFS(具体逻辑在深度优先搜索里)计算，得出开始时间、结束时间
     * 2、对图G进行转置，将上述图G的各顶点的结束时间进行逆向排序，对结束时间从长到短的各个顶点，在转置G中调用DFS算法，
     *      得出新的起始时间与结束时间
     * 3、每一颗DFS算法得出的深度优先森林中的树，都是一个强连通分量
     *
     * 单项非循环链表中，每个节点均可算是一个强连通分量
     *
     * 以上简单的理解就是：
     * 第一遍对图G进行的DFS得出结束时间越大则说明其处于树的越高处，而对于转置图GT来说，则处于树的越低处。
     * 比如图G有a -> b -> c，暂时不知道是否有其他路径。
     * 而转置图GT有a <- b <- c。此时从a出发能找到到c的路,即a -> c。
     * 那对于图G来说，必然存在路径c -> a。则至少abc会是某组强连通分量的一份或者全部
     *
     */

}
